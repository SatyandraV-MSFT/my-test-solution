name: "Deploy Bicep Template"
description: "Deploy a Bicep template to Azure and output the resource group name"

inputs:
  module_name:
    description: "Specify the module path (e.g., avm/res/network/network-security-group)"
    required: true
  test_subdir:
    description: "Specify the test subdirectory (e.g., tests/e2e/defaults)"
    required: true
  file_name:
    description: "Specify the Bicep file name"
    required: true
    default: "main.test.bicep"
  region:
    description: "Deployment region (e.g., westeurope)"
    required: false
    default: "westeurope"
  removeDeployment:
    description: 'Set "true" to set module up for removal'
    default: "true"
    required: false
  azure_client_id:
    description: "Az Auth: Azure client ID"
    required: true
  azure_tenant_id:
    description: "Az Auth: Azure tenant ID"
    required: true
  azure_subscription_id:
    description: "Az Auth: Azure subscription ID"
    required: true

outputs:
  deployed_rg_name:
    description: "The name of the deployed resource group"
    value: ${{ env.deployed_rg_name }}

runs:
  using: "composite"
  steps:
    - name: Checkout the feature branch
      uses: actions/checkout@v4
      with:
        ref: ${{ github.head_ref }}
        fetch-depth: 1
        clean: true

    - name: Login to Azure
      uses: azure/login@v2
      with:
        client-id: ${{ inputs.azure_client_id }}
        tenant-id: ${{ inputs.azure_tenant_id }}
        subscription-id: ${{ inputs.azure_subscription_id }}
        enable-AzPSSession: true

    - name: Deploy Bicep Template
      id: deploy_bicep
      shell: bash
      env:
        TEMPLATE_PATH: "${{ inputs.module_name }}/${{ inputs.test_subdir }}/${{ inputs.file_name }}"
        DEPLOY_REGION: ${{ inputs.region }}
      run: |
        echo "Deploying Bicep template using path: $TEMPLATE_PATH"
        RESOURCE_GROUP_NAME=$(az deployment sub create \
          --location "$DEPLOY_REGION" \
          --template-file "${{ github.workspace }}/$TEMPLATE_PATH" \
          --query "properties.outputs.resourceGroupName.value" -o tsv) || {
            echo "Deployment command failed."
            exit 1
          }

        if [ -n "$RESOURCE_GROUP_NAME" ]; then
          echo "Deployed Resource Group Name: $RESOURCE_GROUP_NAME"
          echo "deployed_rg_name=$RESOURCE_GROUP_NAME" >> $GITHUB_ENV
        else
          echo "Deployment failed, no Resource Group created."
          exit 1
        fi

    - name: Set output for deployed resource group
      if: success()
      shell: bash
      run: echo "::set-output name=deployed_rg_name::$RESOURCE_GROUP_NAME"

    - name: Cleanup Resource Group
      if: ${{ (success() || failure()) && inputs.removeDeployment == 'true' }}
      shell: bash
      env:
        RESOURCE_GROUP_NAME: ${{ env.deployed_rg_name }}
      run: |
        if [ -n "$RESOURCE_GROUP_NAME" ]; then
          echo "Cleaning up Resource Group: $RESOURCE_GROUP_NAME"
          az group delete --name "$RESOURCE_GROUP_NAME" --yes --no-wait
        else
          echo "No resource group to delete."
        fi
